{"/home/travis/build/npmtest/node-npmtest-pm2-windows-service/test.js":"/* istanbul instrument in package npmtest_pm2_windows_service */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-pm2-windows-service/lib.npmtest_pm2_windows_service.js":"/* istanbul instrument in package npmtest_pm2_windows_service */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_pm2_windows_service = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_pm2_windows_service = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-pm2-windows-service/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-pm2-windows-service && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_pm2_windows_service */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_pm2_windows_service\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_pm2_windows_service.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_pm2_windows_service.rollup.js'] =\n            local.assetsDict['/assets.npmtest_pm2_windows_service.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_pm2_windows_service.__dirname + '/lib.npmtest_pm2_windows_service.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-pm2-windows-service/node_modules/pm2-windows-service/src/index.js":"exports.install = require('./install');\r\nexports.uninstall = require('./uninstall');\r\n","/home/travis/build/npmtest/node-npmtest-pm2-windows-service/node_modules/pm2-windows-service/src/install.js":"'use strict';\r\n\r\nconst path = require('path'),\r\n    co = require('co'),\r\n    event = require('co-event'),\r\n    promisify = require('promisify-node'),\r\n    fsx = promisify('fs-extra'),\r\n    exec = promisify(require('child_process').exec),\r\n    Service = require('node-windows').Service,\r\n    del = require('del'),\r\n    inquirer = require('inquirer'),\r\n    common = require('./common'),\r\n    setup = require('./setup'),\r\n    save_dir = path.resolve(process.env.APPDATA, 'pm2-windows-service'),\r\n    sid_file = path.resolve(save_dir, '.sid');\r\n\r\nmodule.exports = co.wrap(function*(name, no_setup) {\r\n    common.check_platform();\r\n\r\n    yield common.admin_warning();\r\n\r\n    let setup_response = yield no_setup ? Promise.resolve({\r\n        perform_setup: false\r\n    }) : inquirer.prompt([{\r\n        type: 'confirm',\r\n        name: 'perform_setup',\r\n        message: 'Perform environment setup (recommended)?',\r\n        default: true\r\n    }]);\r\n\r\n    if(setup_response.perform_setup) {\r\n        yield setup();\r\n    }\r\n\r\n    let service = new Service({\r\n        name: name || 'PM2',\r\n        script: path.join(__dirname, 'service.js')\r\n    });\r\n\r\n    // Let this throw if we can't remove previous daemon\r\n    try {\r\n        yield common.remove_previous_daemon(service);\r\n    } catch(ex) {\r\n        throw new Error('Previous daemon still in use, please stop or uninstall existing service before reinstalling.');\r\n    }\r\n\r\n    // NOTE: We don't do (name = name || 'PM2') above so we don't end up\r\n    // writing out a sid_file for default name\r\n    yield* save_sid_file(name);\r\n\r\n    yield* kill_existing_pm2_daemon();\r\n\r\n    yield* install_and_start_service(service);\r\n});\r\n\r\nfunction* save_sid_file(name) {\r\n    if(name) {\r\n        // Save name to %APPDATA%/pm2-windows-service/.sid, if supplied\r\n        yield fsx.outputFile(sid_file, name);\r\n    }\r\n}\r\n\r\nfunction* kill_existing_pm2_daemon() {\r\n    try {\r\n        yield exec('pm2 kill');\r\n    } catch (ex) {\r\n        // PM2 daemon wasn't running, no big deal\r\n    }\r\n}\r\n\r\nfunction* install_and_start_service(service) {\r\n    // Make sure we kick off the install events on next tick BEFORE we yield\r\n    setImmediate(_ => service.install());\r\n\r\n    // Now yield on install/alreadyinstalled/start events\r\n    let e;\r\n    while (e = yield event(service)) {\r\n        switch (e.type) {\r\n            case 'alreadyinstalled':\r\n            case 'install':\r\n                service.start();\r\n                break;\r\n\r\n            case 'start':\r\n                return;\r\n        }\r\n    }\r\n}\r\n","/home/travis/build/npmtest/node-npmtest-pm2-windows-service/node_modules/pm2-windows-service/bin/pm2-service-install":"#!node --harmony\r\n\r\n'use strict';\r\n\r\nconst args = require('yargs')\r\n        .usage('Usage: $0 [-n <service name>]')\r\n        .alias('n', 'name')\r\n        .argv,\r\n    pm2ws = require('../src/index');\r\n\r\npm2ws.install(args.name).then(_ => {\r\n    console.log('PM2 service installed and started.');\r\n}, err => {\r\n    console.error('ERROR', err);\r\n    process.exit((err && err.code) || 1);\r\n});\r\n","/home/travis/build/npmtest/node-npmtest-pm2-windows-service/node_modules/pm2-windows-service/src/common.js":"'use strict';\r\nconst fs = require('fs'),\r\n    path = require('path'),\r\n    exec_sync = require('child_process').execSync,\r\n    shell = require('shelljs'),\r\n    promisify = require('promisify-node'),\r\n    del = require('del'),\r\n    is_admin = require('is-admin');\r\n\r\nexports.check_platform = function() {\r\n    if(!/^win/.test(process.platform)) {\r\n        throw new Error('pm2-windows-service has to be run on Windows...');\r\n    }\r\n};\r\n\r\nexports.admin_warning = function() {\r\n    return promisify(is_admin)().\r\n        then(admin => {\r\n            if(!admin) {\r\n                console.warn('*** HINT: Run this as administrator to avoid the UAC spam ***');\r\n            }\r\n        }, _ => {\r\n            console.warn('*** HINT: Run this as administrator to avoid the UAC spam ***');\r\n            // Don't re-throw, we just assume they aren't admin if it errored\r\n        });\r\n};\r\n\r\nexports.remove_previous_daemon = function(service) {\r\n    return del(path.resolve(__dirname, 'daemon', service.id + '.*'), { force: true });\r\n}\r\n\r\nexports.guess_pm2_global_dir = function() {\r\n    let dir;\r\n\r\n    try {\r\n        // Use 'which' to find pmd 'executable'\r\n        dir = fs.realpathSync(shell.which('pm2').stdout);\r\n\r\n        // Then resolve to the pm2 directory from there\r\n        dir = path.join(dir, '..', 'node_modules', 'pm2', 'index.js' );\r\n    } catch(ex) {\r\n        // Ignore error, just return undefined\r\n    }\r\n\r\n    return dir;\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-pm2-windows-service/node_modules/pm2-windows-service/src/service.js":"'use strict';\r\n\r\nconst path = require('path'),\r\n    common = require('./common'),\r\n    // TODO: Integration test ';' delimited values!!!\r\n    // TODO: [deprecated] Remove support for PM2_SERVICE_SCRIPT and PM2_SERVICE_CONFIG in future\r\n    start_script = process.env.PM2_SERVICE_SCRIPTS || process.env.PM2_SERVICE_CONFIG || process.env.PM2_SERVICE_SCRIPT,\r\n    json_regex = /\\.json$/;\r\n\r\nif(!process.env.PM2_SERVICE_SCRIPTS && (process.env.PM2_SERVICE_CONFIG || process.env.PM2_SERVICE_SCRIPT)) {\r\n    console.warn('[DEPRECATED] \"PM2_SERVICE_CONFIG\" and \"PM2_SERVICE_SCRIPT\" have been deprecated in favour of ' +\r\n        '\"PM2_SERVICE_SCRIPTS\".');\r\n}\r\n\r\n// Try to use the global version of pm2 (first from env, then using npm cli)\r\nlet global_pm2_dir = process.env.PM2_SERVICE_PM2_DIR;\r\nif(!global_pm2_dir) {\r\n\tglobal_pm2_dir = common.guess_pm2_global_dir();\r\n}\r\n\r\nlet pm2;\r\nif(global_pm2_dir) {\r\n    try {\r\n        pm2 = require(global_pm2_dir);\r\n    } catch(ex) {\r\n        console.error('Sorry, this script requires pm2');\r\n\t  \tprocess.exit(1);\r\n    }\r\n}\r\n\r\nif(!pm2) {\r\n    pm2 = require('pm2');\r\n}\r\n\r\n// NOTE: 'true' means the PM2 daemon exists in this process, so it gets kept alive with us as a Windows service\r\npm2.connect(true, function(err) {\r\n    handle_error(err);\r\n\r\n    if(!start_script) {\r\n        // No start script so just try and ressurect\r\n        pm2.resurrect(function(err2) {\r\n            // Don't crash if we failed to resurrect, we might save on shutdown anyway\r\n        });\r\n    } else {\r\n        start_script.split(';').forEach(process_start_script);\r\n    }\r\n});\r\n\r\nfunction process_start_script(start_script) {\r\n    let start_config = start_script;\r\n\r\n    // Make sure all apps in json config file have a cwd set, else the cwd will be the service user's home dir,\r\n    // which will almost never lead to the correct script being found and launched\r\n    if(json_regex.test(start_script)) {\r\n        // Use the directory of the config file as the default cwd\r\n        let default_cwd = path.dirname(start_script);\r\n\r\n        // Try to load the JSON in using require, the parsed JSON will act as our start_config object\r\n        try {\r\n            start_config = require(start_script);\r\n        } catch(ex) {\r\n            throw new Error('Unable to load PM2 JSON configuration file (' + start_script + ')');\r\n        }\r\n\r\n        // PM2 app declarations can be an array or an object with an 'apps' node\r\n        let apps = start_config.apps || start_config;\r\n\r\n        // Normalize apps to an array\r\n        apps = Array.isArray(apps) ? apps : [apps];\r\n\r\n        // Make sure each app definition has a cwd set, else set the default\r\n        apps.forEach(app_definition => {\r\n            if(!app_definition.cwd) {\r\n                app_definition.cwd = default_cwd;\r\n            }\r\n        });\r\n    }\r\n\r\n    // Else, try to start the start script (js file or json config)\r\n    pm2.start(start_config, function(err2) {\r\n        handle_error(err2);\r\n    });\r\n}\r\n\r\nfunction handle_error(err) {\r\n    if(err) {\r\n        if(err instanceof Error) {\r\n            throw err;\r\n        }\r\n\r\n        // We stringify since PM2 chucks us back objects that just end up as [Object object] otherwise\r\n        throw new Error(JSON.stringify(err));\r\n    }\r\n}\r\n","/home/travis/build/npmtest/node-npmtest-pm2-windows-service/node_modules/pm2-windows-service/src/setup.js":"'use strict';\r\n\r\nconst inquirer = require('inquirer'),\r\n    node_windows = require('node-windows'),\r\n    common = require('./common');\r\n\r\nmodule.exports = function() {\r\n    return inquirer.prompt([{\r\n        type: 'confirm',\r\n        name: 'SET_PM2_HOME',\r\n        message: 'Set PM2_HOME?'\r\n    }, {\r\n        // Offer to update PM2_HOME\r\n        type: 'input',\r\n        name: 'PM2_HOME',\r\n        message: 'PM2_HOME value (this path should be accessible to the service user and\\nshould not contain any \"user-context\" variables [e.g. %APPDATA%]):',\r\n        default: process.env.PM2_HOME || '',\r\n        when(answers) {\r\n            return answers.SET_PM2_HOME;\r\n        }\r\n    }, {\r\n        type: 'confirm',\r\n        name: 'SET_PM2_SERVICE_SCRIPTS',\r\n        message: 'Set PM2_SERVICE_SCRIPTS (the list of start-up scripts for pm2)?'\r\n    }, {\r\n        // Set PM2_SERVICE_SCRIPTS up (optional)\r\n        type: 'input',\r\n        name: 'PM2_SERVICE_SCRIPTS',\r\n        message: 'Set the list of startup scripts/files (semi-colon separated json config\\nfiles or js files)',\r\n        default: process.env.PM2_SERVICE_SCRIPTS || '',\r\n        when(answers) {\r\n            return answers.SET_PM2_SERVICE_SCRIPTS;\r\n        }\r\n    }, {\r\n        type: 'confirm',\r\n        name: 'SET_PM2_SERVICE_PM2_DIR',\r\n        message: 'Set PM2_SERVICE_PM2_DIR (the location of the global pm2 to use with the service)? [recommended]'\r\n    }, {\r\n        // Set PM2_SERVICE_PM2_DIR up, to support using global pm2 version (non-optional?)\r\n        type: 'input',\r\n        name: 'PM2_SERVICE_PM2_DIR',\r\n        message: 'Specify the directory containing the pm2 version to be used by the\\nservice',\r\n        default: process.env.PM2_SERVICE_PM2_DIR || common.guess_pm2_global_dir(),\r\n        when(answers) {\r\n            return answers.SET_PM2_SERVICE_PM2_DIR;\r\n        }\r\n    }]).then(do_setup);\r\n};\r\n\r\nfunction do_setup(answers) {\r\n    // Perform setup based on answers object\r\n    const command_promises = Object.keys(answers)\r\n        // Filter out unanswered questions\r\n        .filter(key => !!answers[key])\r\n        // Convert answers to promises resolved/rejected by elevated SETX command executions\r\n        .map(key => new Promise((resolve, reject) => {\r\n            node_windows.elevate(`SETX ${key} \"${answers[key]}\" /m`, err => {\r\n                if(err) {\r\n                    return reject(err);\r\n                }\r\n\r\n                resolve();\r\n            });\r\n        }));\r\n\r\n    // Return a promise which combines all the commands being executed\r\n    return Promise.all(command_promises);\r\n}\r\n","/home/travis/build/npmtest/node-npmtest-pm2-windows-service/node_modules/pm2-windows-service/src/uninstall.js":"'use strict';\r\n\r\nconst path = require('path'),\r\n    co = require('co'),\r\n    event = require('co-event'),\r\n    promisify = require('promisify-node'),\r\n    fsx = promisify('fs-extra'),\r\n    exec = promisify(require('child_process').exec),\r\n    node_win = require('node-windows'),\r\n    elevate = promisify(node_win.elevate),\r\n    Service = node_win.Service,\r\n    del = require('del'),\r\n    common = require('./common'),\r\n    save_dir = path.resolve(process.env.APPDATA, 'pm2-windows-service'),\r\n    sid_file = path.resolve(save_dir, '.sid'),\r\n    MAX_KILL_CHECKS = 12,\r\n    KILL_CHECK_DELAY = 5000;\r\n\r\n\r\nmodule.exports = co.wrap(function*(name) {\r\n    common.check_platform();\r\n\r\n    yield common.admin_warning();\r\n\r\n    let name_from_sid_file;\r\n    try {\r\n        name_from_sid_file = yield fsx.readFile(sid_file, 'utf8');\r\n        name = name_from_sid_file;\r\n    } catch(ex) {\r\n        // No sid_file, just keep our current name\r\n    }\r\n\r\n    // If we don't have a name by now, then default to 'PM2'\r\n    name = name || 'PM2';\r\n\r\n    let service = new Service({\r\n            name: name,\r\n            script: path.join(__dirname, 'service.js')\r\n        }),\r\n        // HACK: node-windows generates a service id, then sticks '.exe' on it\r\n        // to get the actual registered service name\r\n        service_name = service.id + '.exe';\r\n\r\n    yield* verify_service_exists(service_name);\r\n\r\n    yield* stop_and_uninstall_service(service, service_name);\r\n\r\n    yield* remove_sid_file(name_from_sid_file, sid_file);\r\n\r\n    yield* try_confirm_kill(service_name);\r\n\r\n    // Try to clean up the daemon files\r\n    yield common.remove_previous_daemon(service);\r\n});\r\n\r\nfunction* verify_service_exists(service_name) {\r\n    yield exec('sc query ' + service_name);\r\n}\r\n\r\nfunction* stop_and_uninstall_service(service, service_name) {\r\n    // Make sure we kick off the stop event on next tick BEFORE we yield\r\n    setImmediate(_ => service.stop());\r\n\r\n    // Now yield on install/alreadyinstalled/start events\r\n    let e;\r\n    while (e = yield event(service)) {\r\n        switch (e.type) {\r\n            case 'alreadystopped':\r\n            case 'stop':\r\n                yield elevate('sc delete ' + service_name);\r\n                return;\r\n        }\r\n    }\r\n}\r\n\r\n// Checks if the service was fully uninstalled, if not invokes 'sc stop' to give it a little nudge\r\nfunction* try_confirm_kill(service_name) {\r\n    let removed = false;\r\n    try {\r\n        yield* verify_service_exists(service_name);\r\n    } catch(ex) {\r\n        removed = true;\r\n    }\r\n\r\n    if(!removed) {\r\n        // Service hasn't been removed, try stopping it to see if that gets rid of it\r\n        yield elevate('sc stop ' + service_name);\r\n\r\n        removed = yield* poll_for_service_removal(service_name);\r\n\r\n        if(!removed) {\r\n            // Throw if it still isn't fully gone, it's probably marked for deletion, but can't be sure\r\n            // TODO: Determine if it's stopped and/or marked for deletion...\r\n            throw new Error('WARNING: Unable to fully remove service (' + service_name + '), please confirm it is ' +\r\n                'scheduled for deletion.');\r\n        }\r\n    }\r\n}\r\n\r\nfunction* poll_for_service_removal(service_name) {\r\n    let removed = false;\r\n\r\n    // Windows sometimes takes a while to let go of services, so poll for a minute...\r\n    // TODO: Surely there's a better approach...?\r\n    let tries = 0;\r\n    while(!removed && (tries++ < MAX_KILL_CHECKS)) {\r\n        // Re-check to see if it's done now...\r\n        try {\r\n            yield* verify_service_exists(service_name);\r\n        } catch(ex) {\r\n            removed = true;\r\n        }\r\n\r\n        yield new Promise(resolve => setTimeout(resolve, KILL_CHECK_DELAY));\r\n    }\r\n\r\n    return removed;\r\n}\r\n\r\nfunction* remove_sid_file(name_from_sid_file, sid_file) {\r\n    if(name_from_sid_file) {\r\n        // Have to use force=true, since the .sid file is in APPDATA\r\n        yield del(sid_file, { force: true });\r\n    }\r\n}\r\n"}